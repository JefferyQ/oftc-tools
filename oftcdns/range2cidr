#!/usr/bin/python
# Copyright (C) 2007 Luca Filipozzi

import socket, string, struct, sys

def prefix(val):
  i = 32
  while val & 1 != 1:
    val >>= 1
    i -= 1
  return i

def subnet(val):
  return socket.inet_ntoa(struct.pack('!L',val))

# range2cidr() is a reimplementation of netmask's
# rangetoaml() by Robert Stone and Tom Lear / GPL
def range2cidr(iso, low, high):
  lxh = low ^ high;
  i = lxh
  while i & 1:
    i >>= 1
  if i == 0 and (low | lxh) == high:
    # if low and high differ by only one bit (which indicates
    # that the range falls on a cidr boundary), then print
    print "%s %s/%s" % (iso, subnet(low), prefix(high - low + 1))
  else:
    # otherwise, split the range in two and recurse
    i = lxh
    j = 0
    while i >> 1:
      i >>= 1
      j += 1
    mid = ~((i << j) - 1) & high
    range2cidr(iso, low, mid - 1);
    range2cidr(iso, mid, high);

def main():
  for line in sys.stdin:
    iso,low,len = line.strip().split()
    iso = iso.lower()
    low = struct.unpack('!L', socket.inet_aton(low))[0]
    high = low + string.atol(len) - 1
    range2cidr(iso, low, high)

if __name__ == "__main__":
  main()

# vim: set ts=2 sw=2 et:
