#!/usr/bin/python
# Copyright (C) 2007 Luca Filipozzi
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

import IPy, radix, socket, string, struct, sys

IPy.check_addr_prefixlen = False

def aggregate(region, cidrs):
  i = 0
  while i + 1 < len(cidrs):
    x = cidrs[i]        # curr cidr
    y = cidrs[i + 1]    # next cidr
    # if prefix of x equals prefix of y and x is supernet-able
    if x._prefixlen == y._prefixlen and (x.net() & x.len()) == 0:
      x._prefixlen -= 1 # then supernet x (the curr cidr)
      del cidrs[i + 1]  # and delete y (the next cidr)
      if i > 0:         # this is the key: decrement i to aggregate
        i -= 1          # previous cidr with the just supernetted one
    else:
      i += 1            # otherwise move on
  for cidr in cidrs:    # print out whatever's left
    print "%s %s" % (cidr, region)
  del cidrs[:]          # finally, clear the list

def main():
  rtrees = {}
  for line in sys.stdin:
    cidr,region = line.strip().split()
    if region not in rtrees:
      rtrees[region] = radix.Radix()
    rtrees[region].add(cidr)
  for region,rtree in rtrees.iteritems():
    adjacent_cidrs = list()
    for rnode in rtrees[region]:
      curr = IPy.IPint(rnode.prefix)
      if adjacent_cidrs:
        prev = adjacent_cidrs[-1]
        # don't append to the list of adjacent cidrs
        # if the previous cidr contains the current cidr
        if prev.broadcast() >= curr.broadcast():
          continue
        # aggregate the list of adjacent cidrs if the
        # current cidr is not adjacent to the previous cidr
        if curr.net() != prev.broadcast() + 1:
          aggregate(region, adjacent_cidrs)
      # append current cidr to list of adjacent cidrs 
      adjacent_cidrs.append(curr)
    # aggregate the last list of adjacent cidrs
    aggregate(region, adjacent_cidrs)

if __name__ == "__main__":
  main()

# vim: set ts=2 sw=2 et si:
