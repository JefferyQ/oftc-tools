#!/usr/bin/python
# Copyright (C) 2007 Luca Filipozzi
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

import IPy, string, struct, sys

def prefixlen(val, ver):
  if ver == 4:
    i = 32
  elif ver == 6:
    i = 128
  while val & 1 != 1:
    val >>= 1
    i -= 1
  return i

# range2cidr() is a reimplementation of netmask's
# rangetoaml() by Robert Stone and Tom Lear / GPL
def range2cidr(iso, low, high):
  lxh = low.ip ^ high.ip;
  i = lxh
  while i & 1:
    i >>= 1
  if i == 0 and (low.ip | lxh) == high.ip:
    # if low and high differ by only one bit (which indicates
    # that the range falls on a cidr boundary), then print
    low._prefixlen = prefixlen(high.ip - low.ip + 1, low._ipversion)
    print "%s %s" % (iso, low.strFullsize())
  else:
    # otherwise, split the range in two and recurse
    i = lxh
    j = 0
    while i >> 1:
      i >>= 1
      j += 1
    mid = ~((i << j) - 1) & high.ip
    range2cidr(iso, low, IPy.IP(mid - 1));
    range2cidr(iso, IPy.IP(mid), high);

def main():
  for line in sys.stdin:
    iso,low,len = line.strip().split()
    iso = iso.lower()
    low = IPy.IPint(low)
    high = IPy.IPint(low.ip + string.atol(len) - 1)
    range2cidr(iso, low, high)

if __name__ == "__main__":
  main()

# vim: set ts=2 sw=2 et:
