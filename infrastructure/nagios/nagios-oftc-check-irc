#! /usr/bin/perl -T

require 5.004;

use strict;
use Getopt::Long;
use vars qw($opt_V $opt_h $opt_t $opt_p $opt_H $opt_w $opt_c $opt_N $verbose);
use vars qw($PROGNAME);
use lib "/usr/lib/nagios/plugins";
use utils qw($TIMEOUT %ERRORS &print_revision &support &usage);
use Net::IRC;

# ----------------------------------------------------[ Function Prototypes ]--
$^W = 0;
sub print_help ();
sub print_usage ();

# -------------------------------------------------------------[ Enviroment ]--

$ENV{PATH} = "";
$ENV{ENV} = "";
$ENV{BASH_ENV} = "";

# -----------------------------------------------------------------[ Global ]--

$PROGNAME = "check_ircd";
my $NICK = "nagios$$";
my $PORT = 6667;
my $SERVER = "";
my $IRCNAME="OFTC -- Nagios Monitor";

my $WARN = 0;
my $CRIT = 0;

my $COLL = 0;
my $RECON = 0;

my $irc;
my $conn;

# ------------------------------------------------------------[ print_usage ]--

sub print_usage () {
    print "Usage: $PROGNAME -H <host> [-w <warn>] [-c <crit>] [-p <port>] [-N <nickname>]\n";
}

# -------------------------------------------------------------[ print_help ]--

sub print_help () {
    print_revision($PROGNAME,'$Revision: 1.4 $ ');
    print "Copyright (c) 2000 Richard Mayhew/Karl DeBisschop
	       Copyright (c) 2006 OFTC support\@oftc.net

Perl Check IRCD plugin for Nagios

";
    print_usage();
    print "
-H, --hostname=HOST
   Name or IP address of host to check
-w, --warning=INTEGER
   Number of connected users which generates a warning state (Default: 50)
-c, --critical=INTEGER
   Number of connected users which generates a critical state (Default: 100)
-p, --port=INTEGER
   Port that the ircd daemon is running on <host> (Default: 6667)
-t, --timeout=INTEGER
   Timeout (Default: 15)
-v, --verbose
   Print extra debugging information
-N, --nickname
   Specify the nickname to use while connecting to the network (Default: ircd<pid>)
";
}

sub on_nick_taken {
    my $self = shift;
    $self->nick($NICK . $COLL);
    $COLL++;
}

sub on_users {
    my ($self, $event) = @_;
    my $users = ($event->args)[1];

    $users =~ s/I have (\d+) (.*)/$1/;

    my ($state, $answer);

    if($users >= 0)	{
	if ($users > $CRIT) {
	    $state = "CRITICAL";
	    $answer = "CRITICAL: Number Of Clients Connected : $users (Limit = $CRIT)\n";
	} elsif ($users > $WARN) {
	    $state = "WARNING";
	    $answer = "WARNING: Number Of Clients Connected : $users (Limit = $WARN)\n";
	} else {
	    $state = "OK";
	    $answer = "IRCD ok - Current Local Users: $users\n";
	}
    } else {
	$state = "UNKNOWN";
	$answer = "Users Less Than Zero, Something is Fubar'd\n";
    }
	$self->quit;

	print $answer;
	exit $ERRORS{$state};
}

sub on_error {
    my ($self, $event) = @_;
    my $error = ($event->args)[0];

    if($error =~ /Trying to reconnect too fast/ && $RECON < 3)
    {
	$RECON++;
	print "connecting too fast\n" if $verbose;
	sleep(10);
	ircconnect();
    }
}

sub ircconnect {
    print "$SERVER:$PORT $NICK ($IRCNAME) \n" if $verbose;
    $conn = $irc->newconn(
			  Nick => $NICK,
			  Server => $SERVER,
			  Port =>$PORT,
			  Ircname => $IRCNAME
			  ) or graceful($!);

    $conn->add_global_handler(433, \&on_nick_taken);
    $conn->add_global_handler(255, \&on_users);
    $conn->add_global_handler('error', \&on_error);

    $irc->start;
}

sub graceful {
    my $error = shift;

    print "$error\n";
    exit $ERRORS{"UNKNOWN"};
}

# ===================================================================[ MAIN ]==

my $hostname;

Getopt::Long::Configure('bundling');
GetOptions
    ("V"   => \$opt_V,  "version"    => \$opt_V,
     "h"   => \$opt_h,  "help"       => \$opt_h,
     "v"   => \$verbose,"verbose"    => \$verbose,
     "t=i" => \$opt_t,  "timeout=i"  => \$opt_t,
     "w=i" => \$opt_w,  "warning=i"  => \$opt_w,
     "c=i" => \$opt_c,  "critical=i" => \$opt_c,
     "p=i" => \$opt_p,  "port=i"     => \$opt_p,
     "H=s" => \$opt_H,  "hostname=s" => \$opt_H,
     "N=s" => \$opt_N,  "nickname=s" => \$opt_N
     );

if ($opt_V) {
    print_revision($PROGNAME,'$Revision: 1.3 $ ');
    exit $ERRORS{'OK'};
}

if ($opt_h) {print_help(); exit $ERRORS{'OK'};}

($opt_H) || ($opt_H = shift) || usage("Host name/address not specified\n");
$SERVER = $1 if ($opt_H =~ /([-.A-Za-z0-9]+)/);
($SERVER) || usage("Invalid host: $opt_H\n");

($opt_w) || ($opt_w = shift) || ($opt_w = 800);
$WARN = $1 if ($opt_w =~ /^([0-9]+)$/);
($WARN) || usage("Invalid warning threshold: $opt_w\n");

($opt_c) || ($opt_c = shift) || ($opt_c = 1000);
$CRIT = $1 if ($opt_c =~ /^([0-9]+)$/);
($CRIT) || usage("Invalid critical threshold: $opt_c\n");

($opt_p) || ($opt_p = shift) || ($opt_p = 7062);
$PORT = $1 if ($opt_p =~ /^([0-9]+)$/);
($PORT) || usage("Invalid port: $opt_p\n");

if ($opt_t && $opt_t =~ /^([0-9]+)$/) { $TIMEOUT = $1; }

if ($opt_N && $opt_N =~ /([a-zA-Z0-9_-])/) { $NICK = $opt_N; }

# Just in case of problems, let's not hang Nagios
$SIG{'ALRM'} = sub {
    print "Something is Taking a Long Time, Increase Your TIMEOUT (Currently Set At $TIMEOUT Seconds)\n";
    exit $ERRORS{"UNKNOWN"};
};

alarm($TIMEOUT);

$irc = new Net::IRC;

if($verbose) { $irc->debug($verbose); }

ircconnect();

exit $ERRORS{"UNKNOWN"};

