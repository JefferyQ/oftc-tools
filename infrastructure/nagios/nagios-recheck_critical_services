#!/usr/bin/perl

# Copyright (c) 2009 Alexander Wirt <formorer@formorer.de>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
 

use strict;
use warnings;

use Nagios::StatusLog;

my $all = 0;
if (@ARGV and $ARGV[0] eq '-a') {
        $all = 1;
        shift;
}

my $log = Nagios::StatusLog->new(
        Filename => "/var/lib/icinga/status.dat",
        Version  => 3.0
);

open (my $fh, '>', "/var/lib/icinga/rw/icinga.cmd")
        or die "could not open nagios pipe: $!";

foreach my $host ($log->list_hosts) {
        foreach my $service ($log->list_services_on_host($host)) {
                if ($ARGV[0]) {
                        next unless ($host =~ /$ARGV[0]/ or $service =~ /$ARGV[0]/);
                }

                my $svc_stat = $log->service( $host, $service );
                my $recheck = $all;
                my $state = 'OK';

                if ($svc_stat->{'current_state'} == 1 ) {
                        $state = 'WARNING';
                        $recheck=1;
                }
                elsif ($svc_stat->{'current_state'} == 2 ) {
                        $state = 'CRITICAL';
                        $recheck=1;
                }
                elsif ($svc_stat->{'current_state'} == 3 ) {
                        $state = 'UNKNOWN';
                        $recheck=1;
                }

                if ($recheck) {
                        print "$host\t$service\t$state\n";
                        printf $fh "[%i] SCHEDULE_SVC_CHECK;%s;%s;%i\n", time(), $host, $service, time()+1
                }
        }
}
       
close($fh);
