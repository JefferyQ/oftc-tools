#!/usr/bin/perl

# Copyright (C) 2015-2016 Christoph Berg <myon@oftc.net>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Net::DNS;
use YAML::Syck;

my $conffile = shift || die "Syntax: $0 config.yaml";
my $conf = LoadFile($conffile) or die "$conffile: $!";

sub lookup ($$$)
{
    my ($resolver, $name, $rrtype) = @_;
    my @result;

    my $q = $resolver->query($name, $rrtype);
    if (! $q) {
	die "$name $rrtype lookup failed: " . $resolver->errorstring;
    }
    foreach my $rr ($q->answer) {
	push @result, $rr->rdatastr;
    }
    return @result;
}

my $out = "SOA ";
my $warning = 0;

my $resolver = Net::DNS::Resolver->new (nameservers => [$conf->{dns}->{master}]);

foreach my $area (sort keys %{$conf->{areas}}) {
    $resolver->tsig($conf->{areas}->{$area}->{name}, $conf->{areas}->{$area}->{secret});

    my ($soa) = lookup ($resolver, $conf->{dns}->{domain}, 'SOA');
    $soa = $1 if $soa =~ /(\d+)/;
    $out .= "$area: $soa: ";

    my @ns = lookup ($resolver, $conf->{dns}->{domain}, 'NS');
    foreach my $slave (sort @ns) {
	my $resolver2 = Net::DNS::Resolver->new (nameservers => [$slave]);
	$resolver2->tsig($conf->{areas}->{$area}->{name}, $conf->{areas}->{$area}->{secret});

	my ($soa2) = lookup ($resolver2, $conf->{dns}->{domain}, 'SOA');
	$soa2 = $1 if $soa2 =~ /(\d+)/;
	if ($soa eq $soa2) {
	    $slave =~ s/\..*//; # short hostname if everything is ok
	    $out .= "$slave, ";
	} else {
	    $out .= "Mismatch at $slave: $soa2, ";
	    $warning++;
	}
    }
}

$out =~ s/, *$//;

if ($warning) {
    print "WARNING: $out\n";
    exit 1;
} else {
    print "OK: $out\n";
    exit 0;
}
