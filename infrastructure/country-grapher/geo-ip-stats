#!/usr/bin/ruby

require 'net/geoip'
require 'yaml'

IRCDATA = 'irc-data.yaml'

#TODO RRD Tool Stuffs

region_db = [ "unknown","AS","EU","EU","AS","AS",
    "SA","SA","EU","AS","SA","AF","AN","SA","OC",
    "EU","OC","SA","AS","EU","SA","AS","EU","AF",
    "EU","AS","AF","AF","SA","AS","SA","SA","SA",
    "AS","AF","AF","EU","SA","NA","AS","AF","AF",
    "AF","EU","AF","OC","SA","AF","AS","SA","SA",
    "SA","AF","AS","AS","EU","EU","AF","EU","SA",
    "SA","AF","SA","EU","AF","AF","AF","EU","AF",
    "EU","OC","SA","OC","EU","EU","EU","AF","EU",
    "SA","AS","SA","AF","EU","SA","AF","AF","SA",
    "AF","EU","SA","SA","OC","AF","SA","AS","AF",
    "SA","EU","SA","EU","AS","EU","AS","AS","AS",
    "AS","AS","EU","EU","SA","AS","AS","AF","AS",
    "AS","OC","AF","SA","AS","AS","AS","SA","AS",
    "AS","AS","SA","EU","AS","AF","AF","EU","EU",
    "EU","AF","AF","EU","EU","AF","OC","EU","AF",
    "AS","AS","AS","OC","SA","AF","SA","EU","AF",
    "AS","AF","NA","AS","AF","AF","OC","AF","OC",
    "AF","SA","EU","EU","AS","OC","OC","OC","AS",
    "SA","SA","OC","OC","AS","AS","EU","SA","OC",
    "SA","AS","EU","OC","SA","AS","AF","EU","AS",
    "AF","AS","OC","AF","AF","EU","AS","AF","EU",
    "EU","EU","AF","EU","AF","AF","SA","AF","SA",
    "AS","AF","SA","AF","AF","AF","AS","AS","OC",
    "AS","AF","OC","AS","AS","SA","OC","AS","AF",
    "EU","AF","OC","NA","SA","AS","EU","SA","SA",
    "SA","SA","AS","OC","OC","OC","AS","AF","EU",
    "AF","AF","AF","AF"]

g = Net::GeoIP.new(Net::GeoIP::TYPE_DISK)

irc_data = YAML::load(File.open(IRCDATA))
clients = irc_data['clients']

countries = {}
regions = {}

clients.each do |cl|

	if cl['address'].include?(':') || cl['address'] == '255.255.255.0'
		next
	end

	country = g.country_code_by_addr(cl['address'])
	countryid = g.country_id_by_addr(cl['address'])
	region = region_db[countryid.to_i]

	country = 'unknown' unless countryid.to_i > 0

	server = cl['server']

	countries[country] = {} unless countries[country]
	countries[country]['count'] = 0 unless countries[country]['count']
	countries[country]['by-server'] = {} unless countries[country]['by-server']
	countries[country]['by-server'][server] = 0 unless countries[country]['by-server'][server]

	countries[country]['count'] += 1
	countries[country]['by-server'][server] += 1

	regions[region] = {} unless regions[region]
	regions[region]['count'] = 0 unless regions[region]['count']
	regions[region]['by-server'] = {} unless regions[region]['by-server']
	regions[region]['by-server'][server] = 0 unless regions[region]['by-server'][server]

	regions[region]['count'] += 1
	regions[region]['by-server'][server] += 1
end

puts "======= countries ======="
countries.each do |country,cvalue|
	puts "%s:total:%s" % [country, cvalue['count']]
	cvalue['by-server'].each do |server,svalue|
		puts "%s:%s:%s" % [country,server,svalue]
	end
end
puts "======= countries ======="

puts "======== regions ========"
regions.each do |region,rvalue|
	puts "%s:total:%s" % [region, rvalue['count']]
	rvalue['by-server'].each do |server,svalue|
		puts "%s:%s:%s" % [region,server,svalue]
	end
end
puts "======== regions ========"
