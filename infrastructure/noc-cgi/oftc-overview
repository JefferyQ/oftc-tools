#!/usr/bin/perl

use strict;
use warnings;
use Monitoring::Livestatus;
use YAML::Syck;

print "Content-Type: image/png\n\n";

my $qs = $ENV{QUERY_STRING} || '';
my ($testnet, $portprefix, $drubyport) = $qs =~ /testnet/ ?
	("testnet-", "1", 18787) : ("", "", 8787);

# Set this for interoperability with other YAML/Syck bindings:
# e.g. Load('Yes') becomes 1 and Load('No') becomes ''.
$YAML::Syck::ImplicitTyping = 1;
my $servers = LoadFile('/home/oftc/oftc-is/config/servers.yaml') or die "servers.yaml: $@";

my (%ircd, %host2ircd);

foreach my $host (@{ $servers->{servers} }) {
	die "server without name" unless ($host->{name});
	my $name = $host->{name};
	if ($host->{area}) {
		$ircd{$name}->{area} = $host->{area};
	}
	if ($host->{hub}) {
		$ircd{$name}->{hub} = 1;
		if (($host->{rotate} // 'no') eq 'yes') {
			$ircd{$name}->{rotate} = 1;
		}
		if (($host->{userlisten} // 'no') eq 'yes') {
			$ircd{$name}->{userlisten} = 1;
		}
	} else {
		if (($host->{rotate} // 'yes') eq 'yes') {
			$ircd{$name}->{rotate} = 1;
		}
		if (($host->{userlisten} // 'yes') eq 'yes') {
			$ircd{$name}->{userlisten} = 1;
		}
	}
	if ($host->{nagioshost}) {
		$host2ircd{$host->{nagioshost}} = $name;
		$ircd{$name}->{nagioshost} = $host->{nagioshost};
	}
}

my $ml = Monitoring::Livestatus->new(
	socket => '/var/lib/icinga/rw/live'
);
my $query = "GET services
Columns: host_name description state plugin_output
Filter: description = network service - ${testnet}ircd - ${portprefix}6667
Filter: description = network service - ${testnet}ircd - ${portprefix}7062
Filter: description = network service - ${testnet}ircd - login and users
Filter: description = network service - ${testnet}ircd - shedding
Filter: description = network service - ${testnet}ircd - version
Or: 5
";
my $hosts = $ml->selectall_arrayref($query, { Slice => {} });

foreach my $row (@$hosts) {
	my $name = $host2ircd{$row->{host_name}} ? $host2ircd{$row->{host_name}} : $row->{host_name};
	next if ($name =~ /6$/); # skip ipv6 pseudo hosts
	if ($row->{description} eq "network service - ${testnet}ircd - ${portprefix}6667") {
		if ($row->{plugin_output} =~ /OK/) {
			$ircd{$name}->{ircport} = 'OK';
		}
	} elsif ($row->{description} eq "network service - ${testnet}ircd - ${portprefix}7062") {
		if ($row->{plugin_output} =~ /OK/) {
			$ircd{$name}->{linkport} = 'OK';
		}
	} elsif ($row->{description} eq "network service - ${testnet}ircd - login and users") {
		if ($row->{plugin_output} =~ /(?:Current Local Users|Number Of Clients Connected ): (\d+)/) {
			$ircd{$name}->{users} = $1 - 1;
		}
	} elsif ($row->{description} eq "network service - ${testnet}ircd - shedding") {
		if ($row->{plugin_output} =~ /not shedding/) {
			$ircd{$name}->{shedding} = 0;
		} elsif ($row->{plugin_output} =~ /: shedding/) {
			$ircd{$name}->{shedding} = 1;
		}
	} elsif ($row->{description} eq "network service - ${testnet}ircd - version") {
		if ($row->{plugin_output} =~ /hybrid.*oftc(.*?\))/) { # extract x.y.z(serno) part
			$ircd{$name}->{version} = $1;
		}
	} else {
		die "unexpected description $row->{description}";
	}
}

my $command = -t 1 ? "cat" : "fdp -Tpng -Nfontsize=8";
open DOT, "| $command";

print DOT "graph oftc {\n";
foreach my $host (sort keys %ircd) {
	my $ircd = $ircd{$host};
	my $fillcolor =
		! $ircd->{linkport} ? 'red' :
		$ircd->{shedding} ? 'lightblue' :
		! $ircd->{ircport} ? 'grey' :
		! $ircd->{rotate} ? 'yellow' : '';
	my $host_str = $host;
	$host_str .= " ($ircd->{nagioshost})" if ($ircd->{nagioshost});
	my $info = "";
	$info .= "\\n$ircd->{version}" if ($ircd->{version});
	$info .= "\\n${portprefix}7062 closed" if (! $ircd->{linkport});
	$info .= "\\n${portprefix}6667 closed" if (! $ircd->{ircport});
	$info .= "\\n$ircd->{area}" if ($ircd->{area});
	$info .= " rotate" if ($ircd->{rotate});
	$info .= $ircd->{userlisten} ? ' ul' : ' noul';
	$info .= '\nshedding' if ($ircd->{shedding});
	printf DOT "  \"%s\" [label=\"%s\\n%s%s users%s\"%s,shape=\"box\"%s]\n",
		$host,
		$host_str,
		($ircd->{hub} ? 'hub, ' : ''),
		(exists $ircd->{users} ? $ircd->{users} : '??'),
		$info,
		($fillcolor ? ",style=filled,fillcolor=$fillcolor" : ''),
		($ircd->{hub} ? ',peripheries=2' : '');
}

my $links = "/var/cache/oftc/${testnet}links";
my $mtime = (stat $links)[9] || 0;
if ($mtime < time - 60) { # older than 1 minute
	system "nagios-get-links -p $drubyport > $links";
}

if (open LINKS, $links) {
	print DOT "\n";

	while (<LINKS>) {
		next unless (/([^. ]+)\S* ([^. ]+)\S*/);
		next if $1 eq $2;
		print DOT "  \"$1\" -- \"$2\"\n";
	}
}

print DOT "}\n";
close DOT;
